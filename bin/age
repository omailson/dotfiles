#!/usr/bin/env python2

####
# Usage:
#
# Query the age of a person who was born in 1987
# $ age 1987=0
#
# At what year this person was 15 years old?
# $ age 1987=0?15
#
# What what year this person will be 40 and 50 years old
# $ age 1987=0?40,50
#
# The person was 15 two years ago
# $ age 2014-2=15
#
# What was his/her age in 2001
# $ age 2014-2=15 2001
#
# How old it will be in 7 years
# $ age 2014-2=15 2014+7
#
# You can set more than one person
# $ age 2014-2=15 1987=0 2014+7
#
####

import sys
import re
from datetime import date

ages = []
years = []

def parseargs(args):
    agepattern = re.compile(r'(?P<year>\d{4}([+-]\d+)?)=(?P<age>\d+)(?P<ages>\?(\d+,)*\d+)?')
    yearpattern = re.compile(r'\d{4}([+-]\d+)?')

    for arg in args:
        if arg == '--help':
            printhelp()

        agematch = agepattern.match(arg)
        yearmatch = yearpattern.match(arg)

        if agematch:
            year = eval(agematch.group('year'))
            age = int(agematch.group('age'))
            ages.append((year, age))

            # Append years
            years.append(year)
            if agematch.group('ages'):
                agesqueried = agematch.group('ages').lstrip('?').split(',')
                for a in agesqueried:
                    years.append(year - age + int(a))
        elif yearmatch:
            years.append(eval(arg))
        else:
            pass # Throw exeception

def addbirthyears():
    for age in ages:
        years.append(age[0] - age[1])

def sanitizedata():
    global years

    # Add current year
    today = date.today()
    years.append(today.year)

    # Sort years and remove duplicates
    years = list(set(years))
    years.sort()

def printvalues():
    for age in ages:
        for year in years:
            birth = age[0] - age[1]
            if year < birth:
                continue

            if age[0] == year:
                print "**%d=%d**" % (year, year - birth),
            else:
                print "%d=%d" % (year, year - birth),
        print

def printhelp():
    with open(__file__, "r") as f:
        data = f.readlines()

    usage = False
    for d in data:
        if d.startswith('####'):
            if not usage: # Will start printing usage information
                usage = True
            else: # Stop printing usage information
                break

        if usage:
            print d.replace('#', ''),

    sys.exit(0)

parseargs(sys.argv)
addbirthyears()
sanitizedata()

printvalues()
